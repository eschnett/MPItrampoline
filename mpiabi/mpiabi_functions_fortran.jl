@enum Typ begin
    # Handles
    comm
    datatype
    errhandler
    file
    group
    info
    message
    session
    op
    request
    win
    # "Typed" integers that need to be converted
    errorcode
    proc
    tag
    # Other
    address                   # `integer(MPI_ADDRESS_KIND)`
    argv                      # `character(*), dimension(*)` that may be `MPI_ARGV_NULL`
    argvs                     # `character(*), dimension(:, *)` that may be `MPI_ARGVS_NULL`
    buffer                    # ignore-TKR buffer
    buffer_inplace            # ignore-TKR buffer that may be `MPI_IN_PLACE`
    character                 # `character(*)`
    count                     # `integer(MPI_COUNT_KIND)`
    double_precision          # `double precision`
    external                  # `external`
    integer                   # generic integer
    logical                   # generic logical
    maybe_undefined           # generic integer that may be `MPI_UNDEFINED`
    offset                    # `integer(MPI_OFFSET_KIND)`
    status                    # `integer, dimension(MPI_STATUS_SIZE)`
    threadlevel               # thread level
    void                      # nothing (return value of a subroutine)
    weight                    # generic integer, but array can also be `MPI_UNWEIGHTED` or `MPI_WEIGHTS_EMPTY`
end

@enum Intent in_ out inout unclear
function fortran(intent::Intent)
    intent === in_ && return "intent(in)"
    intent === out && return "intent(out)"
    intent === inout && return "intent(inout)"
    intent === unclear && return ""
    @assert false
end

struct Arg
    name::Symbol
    type::Typ
    intent::Intent
    cond::Union{Nothing,Symbol,AbstractString}
    dim::Union{Nothing,Symbol}
    useddim::Union{Nothing,Symbol}
end
function Arg(name::Symbol, type::Typ, intent::Intent; cond=nothing, dim=nothing, useddim=nothing)
    return Arg(name, type, intent, cond, dim, useddim)
end

struct Fun
    name::Symbol
    result::Typ
    version::VersionNumber
    args::Vector{Arg}
end

################################################################################

const functions = [
    # A.5 Fortran Bindings with `mpif.h` or the `mpi` Module

    # A.5.1 Point-to-Point Communication Fortran Bindings
    Fun(
        :MPI_Bsend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Bsend_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Buffer_attach, void, v"0", [Arg(:buffer, buffer, unclear), Arg(:size, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Buffer_detach, void, v"0", [Arg(:buffer_addr, address, out), Arg(:size, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Buffer_flush, void, v"4.1", [Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Buffer_iflush, void, v"4.1", [Arg(:request, request, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Cancel, void, v"0", [Arg(:request, request, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_attach_buffer,
        void,
        v"4.1",
        [Arg(:comm, comm, in_), Arg(:buffer, buffer, in_), Arg(:size, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Comm_detach_buffer,
        void,
        v"4.1",
        [Arg(:comm, comm, in_), Arg(:buffer_addr, address, out), Arg(:size, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Comm_flush_buffer, void, v"4.1", [Arg(:comm, comm, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_iflush_buffer, void, v"4.1", [Arg(:comm, comm, in_), Arg(:request, request, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Get_count,
        void,
        v"0",
        [Arg(:status, status, in_), Arg(:datatype, datatype, in_), Arg(:count, maybe_undefined, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Ibsend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Improbe,
        void,
        v"0",
        [
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:flag, logical, out),
            Arg(:message, message, out; cond=:flag),
            Arg(:status, status, out; cond=:flag),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Imrecv,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:message, message, out),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iprobe,
        void,
        v"0",
        [
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:flag, logical, out),
            Arg(:status, status, out; cond=:flag),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Irecv,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Irsend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Isend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Isendrecv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:sendtag, tag, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:recvtag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Isendrecv_replace,
        void,
        v"0",
        [
            Arg(:buf, buffer, inout),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:sendtag, tag, in_),
            Arg(:source, proc, in_),
            Arg(:recvtag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Issend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Mprobe,
        void,
        v"0",
        [
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:message, message, out),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Mrecv,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:message, message, out),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Probe,
        void,
        v"0",
        [
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Recv,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Recv_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Request_free, void, v"0", [Arg(:request, request, inout), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Request_get_status,
        void,
        v"0",
        [
            Arg(:request, request, in_),
            Arg(:flag, logical, out),
            Arg(:status, status, out; cond=:flag),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Request_get_status_all,
        void,
        v"4.1",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_requests, request, in_; dim=:count),
            Arg(:flag, logical, out),
            Arg(:array_of_statuses, status, out; cond=:flag, dim=:count),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Request_get_status_any,
        void,
        v"4.1",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_requests, request, in_; dim=:count),
            Arg(:index, integer, out),
            Arg(:flag, logical, out),
            Arg(:status, status, out; cond=:flag),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Request_get_status_some,
        void,
        v"4.1",
        [
            Arg(:incount, integer, in_),
            Arg(:array_of_requests, request, in_; dim=:incount),
            Arg(:outcount, integer, out),
            Arg(:array_of_indices, integer, out; dim=:incount, useddim=:outcount),
            Arg(:array_of_statuses, status, out; dim=:incount, useddim=:outcount),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Rsend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Rsend_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Send,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Send_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Sendrecv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:sendtag, tag, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:recvtag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Sendrecv_replace,
        void,
        v"0",
        [
            Arg(:buf, buffer, inout),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:sendtag, tag, in_),
            Arg(:source, proc, in_),
            Arg(:recvtag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Session_attach_buffer,
        void,
        v"4.1",
        [Arg(:session, session, in_), Arg(:buffer, buffer, in_), Arg(:size, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Session_detach_buffer,
        void,
        v"4.1",
        [Arg(:session, session, in_), Arg(:buffer_addr, address, out), Arg(:size, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Session_flush_buffer, void, v"4.1", [Arg(:session, session, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Session_iflush_buffer,
        void,
        v"4.1",
        [Arg(:session, session, in_), Arg(:request, request, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Ssend,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ssend_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:dest, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Start, void, v"0", [Arg(:request, request, inout), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Startall,
        void,
        v"0",
        [Arg(:count, integer, in_), Arg(:array_of_requests, request, inout; dim=:count), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Status_get_error, void, v"4.1", [Arg(:status, status, in_), Arg(:err, errorcode, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Status_get_source, void, v"4.1", [Arg(:status, status, in_), Arg(:source, proc, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Status_get_tag, void, v"4.1", [Arg(:status, status, in_), Arg(:tag, tag, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Test,
        void,
        v"0",
        [
            Arg(:request, request, inout),
            Arg(:flag, logical, out),
            Arg(:status, status, out; cond=:flag),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Test_cancelled, void, v"0", [Arg(:status, status, in_), Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Testall,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_requests, request, inout; cond=:flag, dim=:count),
            Arg(:flag, logical, out),
            Arg(:array_of_statuses, status, out; cond=:flag, dim=:count),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Testany,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_requests, request, inout; cond="flag .and. i == index", dim=:count),
            Arg(:index, integer, out),
            Arg(:flag, logical, out),
            Arg(:status, status, out; cond=:flag),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Testsome,
        void,
        v"0",
        [
            Arg(:incount, integer, in_),
            Arg(:array_of_requests, request, inout; cond="i <= outcount", dim=:incount),
            Arg(:outcount, integer, out),
            Arg(:array_of_indices, integer, out; dim=:incount, useddim=:outcount),
            Arg(:array_of_statuses, status, out; dim=:incount, useddim=:outcount),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Wait, void, v"0", [Arg(:request, request, inout), Arg(:status, status, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Waitall,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_requests, request, inout; dim=:count),
            Arg(:array_of_statuses, status, out; dim=:count),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Waitany,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_requests, request, inout; cond="i == index", dim=:count),
            Arg(:index, integer, out),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Waitsome,
        void,
        v"0",
        [
            Arg(:incount, integer, in_),
            Arg(:array_of_requests, request, inout; cond="i <= outcount", dim=:incount),
            Arg(:outcount, integer, out),
            Arg(:array_of_indices, integer, out; dim=:incount, useddim=:outcount),
            Arg(:array_of_statuses, status, out; dim=:incount, useddim=:outcount),
            Arg(:ierror, errorcode, out),
        ],
    ),

    # A.5.2 Partitioned Communication Fortran Bindings

    Fun(
        :MPI_Parrived,
        void,
        v"0",
        [Arg(:request, request, in_), Arg(:partition, integer, in_), Arg(:flag, logical, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Pready, void, v"0", [Arg(:partition, integer, in_), Arg(:request, request, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Pready_list,
        void,
        v"0",
        [
            Arg(:length, integer, in_),
            Arg(:array_of_partitions, integer, in_; dim=:length),
            Arg(:request, request, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Pready_range,
        void,
        v"0",
        [
            Arg(:partition_low, integer, in_),
            Arg(:partition_high, integer, in_),
            Arg(:request, request, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Precv_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:partitions, integer, in_),
            Arg(:count, count, in_),
            Arg(:datatype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Psend_init,
        void,
        v"0",
        [
            Arg(:buf, buffer, out),
            Arg(:partitions, integer, in_),
            Arg(:count, count, in_),
            Arg(:datatype, datatype, in_),
            Arg(:source, proc, in_),
            Arg(:tag, tag, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),

    # A.5.3 Datatypes Fortran Bindings

    Fun(:MPI_Aint_add, address, v"0", [Arg(:base, address, in_), Arg(:disp, address, in_)]),
    Fun(:MPI_Aint_diff, address, v"0", [Arg(:addr1, address, in_), Arg(:addr2, address, in_)]),
    Fun(:MPI_Get_address, void, v"0", [Arg(:location, buffer, in_), Arg(:address, address, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Get_elements,
        void,
        v"0",
        [Arg(:status, status, in_), Arg(:datatype, datatype, in_), Arg(:count, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Pack,
        void,
        v"0",
        [
            Arg(:inbuf, buffer, in_),
            Arg(:incount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:outbuf, buffer, out),
            Arg(:outsize, integer, in_),
            Arg(:position, integer, out),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Pack_external,
        void,
        v"0",
        [
            Arg(:datarep, character, in_),
            Arg(:inbuf, buffer, in_),
            Arg(:incount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:outbuf, buffer, out),
            Arg(:outsize, address, in_),
            Arg(:position, address, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Pack_external_size,
        void,
        v"0",
        [
            Arg(:datarep, character, in_),
            Arg(:incount, count, in_),
            Arg(:datatype, datatype, in_),
            Arg(:size, address, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Pack_size,
        void,
        v"0",
        [
            Arg(:incount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:size, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Type_commit, void, v"0", [Arg(:datatype, datatype, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Type_contiguous,
        void,
        v"0",
        [Arg(:count, integer, in_), Arg(:oldtype, datatype, in_), Arg(:newtype, datatype, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_create_darray,
        void,
        v"0",
        [
            Arg(:size, integer, in_),
            Arg(:rank, integer, in_),
            Arg(:ndims, integer, in_),
            Arg(:array_of_gsizes, integer, in_; dim=:ndims),
            Arg(:array_of_distribs, integer, in_; dim=:ndims),
            Arg(:array_of_dargs, integer, in_; dim=:ndims),
            Arg(:array_of_psizes, integer, in_; dim=:ndims),
            Arg(:order, integer, in_),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_hindexed,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_blocklengths, integer, in_; dim=:count),
            Arg(:array_of_displacements, address, in_; dim=:count),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_hindexed_block,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:blocklength, integer, in_),
            Arg(:array_of_displacements, address, in_; dim=:count),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_hvector,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:blocklength, integer, in_),
            Arg(:stride, address, in_),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_indexed_block,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:blocklength, integer, in_),
            Arg(:array_of_displacements, integer, in_; dim=:count),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_resized,
        void,
        v"0",
        [
            Arg(:oldtype, datatype, in_),
            Arg(:lb, address, in_),
            Arg(:extent, address, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_struct,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_blocklengths, integer, in_; dim=:count),
            Arg(:array_of_displacements, address, in_; dim=:count),
            Arg(:array_of_types, datatype, in_; dim=:count),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_create_subarray,
        void,
        v"0",
        [
            Arg(:ndims, integer, in_),
            Arg(:array_of_sizes, integer, in_; dim=:ndims),
            Arg(:array_of_subsizes, integer, in_; dim=:ndims),
            Arg(:array_of_starts, integer, in_; dim=:ndims),
            Arg(:order, integer, in_),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Type_dup, void, v"0", [Arg(:oldtype, datatype, in_), Arg(:newtype, datatype, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Type_free, void, v"0", [Arg(:datatype, datatype, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Type_get_contents,
        void,
        v"0",
        [
            Arg(:datatype, datatype, in_),
            Arg(:max_integers, integer, in_),
            Arg(:max_addresses, integer, in_),
            Arg(:max_datatypes, integer, in_),
            Arg(:array_of_integers, integer, out),
            Arg(:array_of_addresses, address, out),
            Arg(:array_of_datatypes, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_get_envelope,
        void,
        v"0",
        [
            Arg(:datatype, datatype, in_),
            Arg(:num_integers, integer, out),
            Arg(:num_addresses, integer, out),
            Arg(:num_datatypes, integer, out),
            Arg(:combiner, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_get_extent,
        void,
        v"0",
        [Arg(:datatype, datatype, in_), Arg(:lb, address, out), Arg(:extent, address, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_get_true_extent,
        void,
        v"0",
        [Arg(:datatype, datatype, in_), Arg(:true_lb, address, out), Arg(:true_extent, address, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_indexed,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_blocklengths, integer, in_; dim=:count),
            Arg(:array_of_displacements, integer, in_; dim=:count),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Type_size, void, v"0", [Arg(:datatype, datatype, in_), Arg(:size, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Type_vector,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:blocklength, integer, in_),
            Arg(:stride, integer, in_),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Unpack,
        void,
        v"0",
        [
            Arg(:inbuf, buffer, in_),
            Arg(:insize, integer, in_),
            Arg(:position, integer, out),
            Arg(:outbuf, buffer, out),
            Arg(:outcount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Unpack_external,
        void,
        v"0",
        [
            Arg(:datarep, character, in_),
            Arg(:inbuf, buffer, in_),
            Arg(:insize, address, in_),
            Arg(:position, address, out),
            Arg(:outbuf, buffer, out),
            Arg(:outcount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),

    # A.5.4 Collective Communication Fortran Bindings

    Fun(
        :MPI_Allgather,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Allgather_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Allgatherv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Allgatherv_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Allreduce,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Allreduce_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Alltoall,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Alltoall_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Alltoallv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Alltoallv_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Alltoallw,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtypes, datatype, in_; dim=:comm_size),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtypes, datatype, in_; dim=:comm_size),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Alltoallw_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtypes, datatype, in_; dim=:comm_size),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtypes, datatype, in_; dim=:comm_size),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Barrier, void, v"0", [Arg(:comm, comm, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Barrier_init,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:info, info, in_), Arg(:request, request, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Bcast,
        void,
        v"0",
        [
            Arg(:buffer, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Bcast_init,
        void,
        v"0",
        [
            Arg(:buffer, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Exscan,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Exscan_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Gather,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Gather_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Gatherv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Gatherv_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iallgather,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iallgatherv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iallreduce,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ialltoall,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ialltoallv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ialltoallw,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtypes, datatype, in_; dim=:comm_size),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtypes, datatype, in_; dim=:comm_size),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Ibarrier, void, v"0", [Arg(:comm, comm, in_), Arg(:request, request, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Ibcast,
        void,
        v"0",
        [
            Arg(:buffer, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iexscan,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Igather,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Igatherv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ireduce,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ireduce_scatter,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ireduce_scatter_block,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iscan,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iscatter,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Iscatterv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Op_commutative, void, v"0", [Arg(:op, op, in_), Arg(:commute, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Op_create,
        void,
        v"99999",
        [
            Arg(:user_fn, external, in_), # MPI_User_function *
            Arg(:commute, logical, in_),
            Arg(:op, op, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Op_free, void, v"0", [Arg(:op, op, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Reduce,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Reduce_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Reduce_local,
        void,
        v"0",
        [
            Arg(:inbuf, buffer, in_),
            Arg(:inoutbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Reduce_scatter,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Reduce_scatter_block,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Reduce_scatter_block_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Reduce_scatter_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Scan,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Scan_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Scatter,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Scatter_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Scatterv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Scatterv_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_get_value_index,
        void,
        v"4.1",
        [
            Arg(:value_type, datatype, in_),
            Arg(:index_type, datatype, in_),
            Arg(:pair_type, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),

    # A.5.5 Groups, Contexts, Communicators, and Caching Fortran Bindings

    Fun(
        :MPI_Comm_compare,
        void,
        v"0",
        [Arg(:comm1, comm, in_), Arg(:comm2, comm, in_), Arg(:result, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Comm_create,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:group, group, in_), Arg(:newcomm, comm, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Comm_create_from_group,
        void,
        v"0",
        [
            Arg(:group, group, in_),
            Arg(:stringtag, character, in_),
            Arg(:info, info, in_),
            Arg(:errhandler, errhandler, in_),
            Arg(:newcomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Comm_create_group,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:group, group, in_),
            Arg(:tag, integer, in_),
            Arg(:newcomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Comm_create_keyval,
        void,
        v"99999",
        [
            Arg(:comm_copy_attr_fn, external, in_), # MPI_Comm_copy_attr_function *
            Arg(:comm_delete_attr_fn, external, in_), # MPI_Comm_delete_attr_function *
            Arg(:comm_keyval, integer, out),
            Arg(:extra_state, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Comm_delete_attr, void, v"0", [Arg(:comm, comm, in_), Arg(:comm_keyval, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_dup, void, v"0", [Arg(:comm, comm, in_), Arg(:newcomm, comm, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_dup_with_info,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:info, info, in_), Arg(:newcomm, comm, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Comm_free, void, v"0", [Arg(:comm, comm, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_get_name,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:comm_name, character, out), Arg(:resultlen, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Comm_free_keyval, void, v"0", [Arg(:comm_keyval, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_get_attr,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:comm_keyval, integer, in_),
            Arg(:attribute_val, buffer, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Comm_get_info, void, v"0", [Arg(:comm, comm, in_), Arg(:info_used, info, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_group, void, v"0", [Arg(:comm, comm, in_), Arg(:group, group, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_idup,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:newcomm, comm, out), Arg(:request, request, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Comm_idup_with_info,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:newcomm, comm, out),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Comm_rank, void, v"0", [Arg(:comm, comm, in_), Arg(:rank, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_remote_group, void, v"0", [Arg(:comm, comm, in_), Arg(:group, group, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_remote_size, void, v"0", [Arg(:comm, comm, in_), Arg(:size, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_set_attr,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:comm_keyval, integer, in_), Arg(:attribute_val, buffer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Comm_set_info, void, v"0", [Arg(:comm, comm, in_), Arg(:info, info, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_set_name, void, v"0", [Arg(:comm, comm, in_), Arg(:comm_name, character, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_size, void, v"0", [Arg(:comm, comm, in_), Arg(:size, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_split,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:color, integer, in_),
            Arg(:key, integer, in_),
            Arg(:newcomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Group_free, void, v"0", [Arg(:group, group, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_split_type,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:split_type, integer, in_),
            Arg(:key, integer, in_),
            Arg(:info, info, in_),
            Arg(:newcomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Comm_test_inter, void, v"0", [Arg(:comm, comm, in_), Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Group_compare,
        void,
        v"0",
        [Arg(:group1, group, in_), Arg(:group2, group, in_), Arg(:result, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Group_difference,
        void,
        v"0",
        [Arg(:group1, group, in_), Arg(:group2, group, in_), Arg(:newgroup, group, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Group_excl,
        void,
        v"0",
        [
            Arg(:group, group, in_),
            Arg(:n, integer, in_),
            Arg(:ranks, integer, in_; dim=:n),
            Arg(:newgroup, group, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Group_from_session_pset,
        void,
        v"0",
        [Arg(:session, session, in_), Arg(:pset_name, character, in_), Arg(:newgroup, group, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Group_incl,
        void,
        v"0",
        [
            Arg(:group, group, in_),
            Arg(:n, integer, in_),
            Arg(:ranks, integer, in_; dim=:n),
            Arg(:newgroup, group, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Group_intersection,
        void,
        v"0",
        [Arg(:group1, group, in_), Arg(:group2, group, in_), Arg(:newgroup, group, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Group_range_excl,
        void,
        v"0",
        [
            Arg(:group, group, in_),
            Arg(:n, integer, in_),
            Arg(:ranges, integer, in_; dim=:n),
            Arg(:newgroup, group, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Group_range_incl,
        void,
        v"0",
        [
            Arg(:group, group, in_),
            Arg(:n, integer, in_),
            Arg(:ranges, integer, in_; dim=:n),
            Arg(:newgroup, group, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Group_rank, void, v"0", [Arg(:group, group, in_), Arg(:rank, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Group_size, void, v"0", [Arg(:group, group, in_), Arg(:size, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Group_translate_ranks,
        void,
        v"0",
        [
            Arg(:group1, group, in_),
            Arg(:n, integer, in_),
            Arg(:ranks1, integer, in_; dim=:n),
            Arg(:group2, group, in_),
            Arg(:ranks2, integer, in_; dim=:n),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Group_union,
        void,
        v"0",
        [Arg(:group1, group, in_), Arg(:group2, group, in_), Arg(:newgroup, group, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Intercomm_create,
        void,
        v"0",
        [
            Arg(:local_comm, comm, in_),
            Arg(:local_leader, integer, in_),
            Arg(:peer_comm, comm, in_),
            Arg(:remote_leader, integer, in_),
            Arg(:tag, integer, in_),
            Arg(:newintercomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Intercomm_create_from_groups,
        void,
        v"0",
        [
            Arg(:local_group, group, in_),
            Arg(:local_leader, integer, in_),
            Arg(:remote_group, group, in_),
            Arg(:remote_leader, integer, in_),
            Arg(:stringtag, character, in_),
            Arg(:info, info, in_),
            Arg(:errhandler, errhandler, in_),
            Arg(:newintercomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Intercomm_merge,
        void,
        v"0",
        [Arg(:intercomm, comm, in_), Arg(:high, integer, in_), Arg(:newintracomm, comm, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_create_keyval,
        void,
        v"99999",
        [
            Arg(:type_copy_attr_fn, external, in_), # MPI_Type_copy_attr_function *
            Arg(:type_delete_attr_fn, external, in_), # MPI_Type_delete_attr_function *
            Arg(:type_keyval, integer, out),
            Arg(:extra_state, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_delete_attr,
        void,
        v"0",
        [Arg(:datatype, datatype, in_), Arg(:type_keyval, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Type_free_keyval, void, v"0", [Arg(:type_keyval, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Type_get_attr,
        void,
        v"0",
        [
            Arg(:datatype, datatype, in_),
            Arg(:type_keyval, integer, in_),
            Arg(:attribute_val, buffer, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_get_name,
        void,
        v"0",
        [
            Arg(:datatype, datatype, in_),
            Arg(:type_name, character, out),
            Arg(:resultlen, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_set_attr,
        void,
        v"0",
        [
            Arg(:datatype, datatype, in_),
            Arg(:type_keyval, integer, in_),
            Arg(:attribute_val, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_set_name,
        void,
        v"0",
        [Arg(:datatype, datatype, in_), Arg(:type_name, character, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Win_create_keyval,
        void,
        v"99999",
        [
            Arg(:win_copy_attr_fn, external, in_), # MPI_Win_copy_attr_function *
            Arg(:win_delete_attr_fn, external, in_), # MPI_Win_delete_attr_function *
            Arg(:win_keyval, integer, out),
            Arg(:extra_state, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Win_delete_attr, void, v"0", [Arg(:win, win, in_), Arg(:win_keyval, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_free_keyval, void, v"0", [Arg(:win_keyval, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Win_get_attr,
        void,
        v"0",
        [
            Arg(:win, win, in_),
            Arg(:win_keyval, integer, in_),
            Arg(:attribute_val, buffer, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_get_name,
        void,
        v"0",
        [Arg(:win, win, in_), Arg(:win_name, character, out), Arg(:resultlen, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Win_set_attr,
        void,
        v"0",
        [Arg(:win, win, in_), Arg(:win_keyval, integer, in_), Arg(:attribute_val, buffer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Win_set_name, void, v"0", [Arg(:win, win, in_), Arg(:win_name, character, in_), Arg(:ierror, errorcode, out)]),

    # A.5.6 Virtual Topologies for MPI Processes Fortran Bindings

    Fun(
        :MPI_Cart_coords,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:rank, integer, in_),
            Arg(:maxdims, integer, in_),
            Arg(:coords, integer, out; dim=:maxdims),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Cart_create,
        void,
        v"0",
        [
            Arg(:comm_old, comm, in_),
            Arg(:ndims, integer, in_),
            Arg(:dims, integer, in_; dim=:ndims),
            Arg(:periods, logical, in_; dim=:ndims),
            Arg(:reorder, logical, in_),
            Arg(:comm_cart, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Cart_get,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:maxdims, integer, in_),
            Arg(:dims, integer, out; dim=:maxdims),
            Arg(:periods, integer, out; dim=:maxdims),
            Arg(:coords, integer, out; dim=:maxdims),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Cart_map,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:ndims, integer, in_),
            Arg(:dims, integer, in_; dim=:ndims),
            Arg(:periods, integer, in_; dim=:ndims),
            Arg(:newrank, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Cart_rank,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:coords, integer, in_; dim=:*), Arg(:rank, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Cart_shift,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:direction, integer, in_),
            Arg(:disp, integer, in_),
            Arg(:rank_source, integer, out),
            Arg(:rank_dest, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Cart_sub,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:remain_dims, logical, in_; dim=:*), Arg(:newcomm, comm, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Cartdim_get, void, v"0", [Arg(:comm, comm, in_), Arg(:ndims, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Dims_create,
        void,
        v"0",
        [Arg(:nnodes, integer, in_), Arg(:ndims, integer, in_), Arg(:dims, integer, in_; dim=:ndims), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Dist_graph_create,
        void,
        v"0",
        [
            Arg(:comm_old, comm, in_),
            Arg(:n, integer, in_),
            Arg(:sources, integer, in_; dim=:n),
            Arg(:degrees, integer, in_; dim=:n),
            Arg(:destinations, integer, in_; dim=:*),
            Arg(:weights, weight, in_; dim=:*),
            Arg(:info, info, in_),
            Arg(:reorder, logical, in_),
            Arg(:comm_dist_graph, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Dist_graph_create_adjacent,
        void,
        v"0",
        [
            Arg(:comm_old, comm, in_),
            Arg(:indegree, integer, in_),
            Arg(:sources, integer, in_; dim=:indegree),
            Arg(:sourceweights, weight, in_; dim=:*),
            Arg(:outdegree, integer, in_),
            Arg(:destinations, integer, in_; dim=:outdegree),
            Arg(:destweights, weight, in_; dim=:*),
            Arg(:info, info, in_),
            Arg(:reorder, integer, in_),
            Arg(:comm_dist_graph, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Dist_graph_neighbors,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:maxindegree, integer, in_),
            Arg(:sources, integer, out; dim=:maxindegree),
            Arg(:sourceweights, weight, out; dim=:*),
            Arg(:maxoutdegree, integer, in_),
            Arg(:destinations, integer, out; dim=:maxoutdegree),
            Arg(:destweights, weight, out; dim=:*),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Dist_graph_neighbors_count,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:indegree, integer, out),
            Arg(:outdegree, integer, out),
            Arg(:weighted, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Graph_create,
        void,
        v"0",
        [
            Arg(:comm_old, comm, in_),
            Arg(:nnodes, integer, in_),
            Arg(:index, integer, in_; dim=:nnodes),
            Arg(:edges, integer, in_; dim=:nnodes),
            Arg(:reorder, integer, in_),
            Arg(:comm_graph, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Graph_get,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:maxindex, integer, in_),
            Arg(:maxedges, integer, in_),
            Arg(:index, integer, out; dim=:maxindex),
            Arg(:edges, integer, out; dim=:maxedges),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Graph_map,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:nnodes, integer, in_),
            Arg(:index, integer, in_; dim=:nnodes),
            Arg(:edges, integer, in_; dim=:nnodes),
            Arg(:newrank, integer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Graph_neighbors,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:rank, integer, in_),
            Arg(:maxneighbors, integer, in_),
            Arg(:neighbors, integer, out; dim=:maxneighbors),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Graph_neighbors_count,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:rank, integer, in_), Arg(:nneighbors, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Graphdims_get,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:nnodes, integer, out), Arg(:nedges, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Ineighbor_allgather,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ineighbor_allgatherv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ineighbor_alltoall,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ineighbor_alltoallv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Ineighbor_alltoallw,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, address, in_; dim=:comm_size),
            Arg(:sendtypes, datatype, in_; dim=:comm_size),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, address, in_; dim=:comm_size),
            Arg(:recvtypes, datatype, in_; dim=:comm_size),
            Arg(:comm, comm, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_allgather,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_allgather_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_allgatherv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, address, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_allgatherv_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:displs, address, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_alltoall,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_alltoall_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcount, integer, in_),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcount, integer, in_),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_alltoallv,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_alltoallv_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, integer, in_; dim=:comm_size),
            Arg(:sendtype, datatype, in_),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, integer, in_; dim=:comm_size),
            Arg(:recvtype, datatype, in_),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_alltoallw,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, address, in_; dim=:comm_size),
            Arg(:sendtypes, datatype, in_; dim=:comm_size),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, address, in_; dim=:comm_size),
            Arg(:recvtypes, datatype, in_; dim=:comm_size),
            Arg(:comm, comm, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Neighbor_alltoallw_init,
        void,
        v"0",
        [
            Arg(:sendbuf, buffer, in_),
            Arg(:sendcounts, integer, in_; dim=:comm_size),
            Arg(:sdispls, address, in_; dim=:comm_size),
            Arg(:sendtypes, datatype, in_; dim=:comm_size),
            Arg(:recvbuf, buffer, out),
            Arg(:recvcounts, integer, in_; dim=:comm_size),
            Arg(:rdispls, address, in_; dim=:comm_size),
            Arg(:recvtypes, datatype, in_; dim=:comm_size),
            Arg(:comm, comm, in_),
            Arg(:info, info, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Topo_test, void, v"0", [Arg(:comm, comm, in_), Arg(:status, integer, out), Arg(:ierror, errorcode, out)]),

    # A.5.7 MPI Environmental Management Fortran Bindings

    Fun(:MPI_Add_error_class, void, v"0", [Arg(:errorclass, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Add_error_code,
        void,
        v"0",
        [Arg(:errorclass, integer, in_), Arg(:errorcode, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Add_error_string,
        void,
        v"0",
        [Arg(:errorcode, integer, in_), Arg(:string, character, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Alloc_mem,
        void,
        v"0",
        [Arg(:size, address, in_), Arg(:info, info, in_), Arg(:baseptr, buffer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Comm_call_errhandler, void, v"0", [Arg(:comm, comm, in_), Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)]
    ),
    Fun(
        :MPI_Comm_create_errhandler,
        void,
        v"99999",
        [
            Arg(:comm_errhandler_fn, external, in_), # MPI_Comm_errhandler_function *
            Arg(:errhandler, errhandler, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Comm_get_errhandler,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:errhandler, errhandler, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Comm_set_errhandler,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:errhandler, errhandler, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Errhandler_free, void, v"0", [Arg(:errhandler, errhandler, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Error_class, void, v"0", [Arg(:errorcode, integer, in_), Arg(:errorclass, integer, out), Arg(:ierror, errorcode, out)]
    ),
    Fun(
        :MPI_Error_string,
        void,
        v"0",
        [Arg(:errorcode, integer, in_), Arg(:string, character, out), Arg(:resultlen, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_File_call_errhandler, void, v"0", [Arg(:fh, file, in_), Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_File_create_errhandler,
        void,
        v"99999",
        [
            Arg(:file_errhandler_fn, external, in_),# MPI_File_errhandler_function *
            Arg(:errhandler, errhandler, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_get_errhandler,
        void,
        v"0",
        [Arg(:file, file, in_), Arg(:errhandler, errhandler, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_set_errhandler,
        void,
        v"0",
        [Arg(:file, file, in_), Arg(:errhandler, errhandler, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Free_mem, void, v"0", [Arg(:base, buffer, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Get_hw_resource_info, void, v"4.1", [Arg(:hw_info, info, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Get_library_version,
        void,
        v"0",
        [Arg(:version, character, out), Arg(:resultlen, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Get_processor_name,
        void,
        v"0",
        [Arg(:name, character, out), Arg(:resultlen, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Get_version, void, v"0", [Arg(:version, integer, out), Arg(:subversion, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Remove_error_class, void, v"4.1", [Arg(:errorclass, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Remove_error_code, void, v"4.1", [Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Remove_error_string, void, v"4.1", [Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Session_call_errhandler,
        void,
        v"0",
        [Arg(:session, session, in_), Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Session_create_errhandler,
        void,
        v"99999",
        [
            Arg(:session_errhandler_fn, external, in_), # MPI_Session_errhandler_function *
            Arg(:errhandler, errhandler, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Session_get_errhandler,
        void,
        v"0",
        [Arg(:session, session, in_), Arg(:errhandler, errhandler, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Session_set_errhandler,
        void,
        v"0",
        [Arg(:session, session, in_), Arg(:errhandler, errhandler, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Win_call_errhandler, void, v"0", [Arg(:win, win, in_), Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Win_create_errhandler,
        void,
        v"99999",
        [
            Arg(:win_errhandler_fn, external, in_), # MPI_Win_errhandler_function *
            Arg(:errhandler, errhandler, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_get_errhandler, void, v"0", [Arg(:win, win, in_), Arg(:errhandler, errhandler, out), Arg(:ierror, errorcode, out)]
    ),
    Fun(
        :MPI_Win_set_errhandler, void, v"0", [Arg(:win, win, in_), Arg(:errhandler, errhandler, in_), Arg(:ierror, errorcode, out)]
    ),
    Fun(:MPI_Wtick, double_precision, v"0", []),
    Fun(:MPI_Wtime, double_precision, v"0", []),

    # A.5.8 The Info Object Fortran Bindings

    Fun(:MPI_Info_create, void, v"0", [Arg(:info, info, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Info_create_env, void, v"0", [Arg(:info, info, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Info_delete, void, v"0", [Arg(:info, info, in_), Arg(:key, character, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Info_dup, void, v"0", [Arg(:info, info, in_), Arg(:newinfo, info, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Info_free, void, v"0", [Arg(:info, info, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Info_get_nkeys, void, v"0", [Arg(:info, info, in_), Arg(:nkeys, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Info_get_nthkey,
        void,
        v"0",
        [Arg(:info, info, in_), Arg(:n, integer, in_), Arg(:key, character, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Info_get_string,
        void,
        v"0",
        [
            Arg(:info, info, in_),
            Arg(:key, character, in_),
            Arg(:buflen, integer, out),
            Arg(:value, character, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Info_set,
        void,
        v"0",
        [Arg(:info, info, in_), Arg(:key, character, in_), Arg(:value, character, in_), Arg(:ierror, errorcode, out)],
    ),

    # A.5.9 Process Creation and Management Fortran Bindings

    Fun(:MPI_Abort, void, v"0", [Arg(:comm, comm, in_), Arg(:errorcode, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Close_port, void, v"0", [Arg(:port_name, character, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_accept,
        void,
        v"0",
        [
            Arg(:port_name, character, in_),
            Arg(:info, info, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:newcomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Comm_connect,
        void,
        v"0",
        [
            Arg(:port_name, character, in_),
            Arg(:info, info, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:newcomm, comm, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Comm_disconnect, void, v"0", [Arg(:comm, comm, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_get_parent, void, v"0", [Arg(:parent, comm, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Comm_join, void, v"0", [Arg(:fd, integer, in_), Arg(:intercomm, comm, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Comm_spawn,
        void,
        v"0",
        [
            Arg(:command, character, in_),
            Arg(:argv, argv, in_; dim=:*),
            Arg(:maxprocs, integer, in_),
            Arg(:info, info, in_),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:intercomm, comm, out),
            Arg(:array_of_errcodes, errorcode, out; dim=:maxprocs),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Comm_spawn_multiple,
        void,
        v"99999",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_commands, character, in_; dim=:count),
            Arg(:array_of_argv, argvs, in_; dim=:*), # dim=(:count, :*)
            Arg(:array_of_maxprocs, integer, in_; dim=:count),
            Arg(:array_of_info, info, in_; dim=:count),
            Arg(:root, integer, in_),
            Arg(:comm, comm, in_),
            Arg(:intercomm, comm, out),
            Arg(:array_of_errcodes, errorcode, out; dim=:*), # dim=???
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Finalize, void, v"0", [Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Finalized, void, v"0", [Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Init, void, v"0", [Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Init_thread,
        void,
        v"0",
        [Arg(:required, threadlevel, in_), Arg(:provided, threadlevel, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Initialized, void, v"0", [Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Is_thread_main, void, v"0", [Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Lookup_name,
        void,
        v"0",
        [Arg(:service_name, character, in_), Arg(:info, info, in_), Arg(:port_name, character, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Open_port, void, v"0", [Arg(:info, info, in_), Arg(:port_name, character, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Publish_name,
        void,
        v"0",
        [Arg(:service_name, character, in_), Arg(:info, info, in_), Arg(:port_name, character, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Query_thread, void, v"0", [Arg(:provided, threadlevel, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Session_finalize, void, v"0", [Arg(:session, session, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Session_get_info, void, v"0", [Arg(:session, session, in_), Arg(:info_used, info, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Session_get_nth_pset,
        void,
        v"0",
        [
            Arg(:session, session, in_),
            Arg(:info, info, in_),
            Arg(:n, integer, in_),
            Arg(:pset_len, integer, out),
            Arg(:pset_name, character, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Session_get_num_psets,
        void,
        v"0",
        [Arg(:session, session, in_), Arg(:info, info, in_), Arg(:npset_names, integer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Session_get_pset_info,
        void,
        v"0",
        [Arg(:session, session, in_), Arg(:pset_name, character, in_), Arg(:info, info, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Session_init,
        void,
        v"0",
        [Arg(:info, info, in_), Arg(:errhandler, errhandler, in_), Arg(:session, session, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Unpublish_name,
        void,
        v"0",
        [Arg(:service_name, character, in_), Arg(:info, info, in_), Arg(:port_name, character, in_), Arg(:ierror, errorcode, out)],
    ),

    # A.5.10 One-Sided Communications Fortran Bindings

    Fun(
        :MPI_Accumulate,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Compare_and_swap,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:compare_addr, buffer, in_),
            Arg(:result_addr, buffer, out),
            Arg(:datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Fetch_and_op,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:result_addr, buffer, out),
            Arg(:datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:op, op, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Get,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, out),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Get_accumulate,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:result_addr, buffer, out),
            Arg(:result_count, integer, in_),
            Arg(:result_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Put,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Raccumulate,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:win, win, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Rget,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, out),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:win, win, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Rget_accumulate,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:result_addr, buffer, out),
            Arg(:result_count, integer, in_),
            Arg(:result_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:op, op, in_),
            Arg(:win, win, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Rput,
        void,
        v"0",
        [
            Arg(:origin_addr, buffer, in_),
            Arg(:origin_count, integer, in_),
            Arg(:origin_datatype, datatype, in_),
            Arg(:target_rank, integer, in_),
            Arg(:target_disp, address, in_),
            Arg(:target_count, integer, in_),
            Arg(:target_datatype, datatype, in_),
            Arg(:win, win, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_allocate,
        void,
        v"0",
        [
            Arg(:size, address, in_),
            Arg(:disp_unit, integer, in_),
            Arg(:info, info, in_),
            Arg(:comm, comm, in_),
            Arg(:baseptr, buffer, out),
            Arg(:win, win, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_allocate_shared,
        void,
        v"0",
        [
            Arg(:size, address, in_),
            Arg(:disp_unit, integer, in_),
            Arg(:info, info, in_),
            Arg(:comm, comm, in_),
            Arg(:baseptr, buffer, out),
            Arg(:win, win, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_attach,
        void,
        v"0",
        [Arg(:win, win, in_), Arg(:base, buffer, out), Arg(:size, address, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Win_complete, void, v"0", [Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Win_create,
        void,
        v"0",
        [
            Arg(:base, buffer, out),
            Arg(:size, address, in_),
            Arg(:disp_unit, integer, in_),
            Arg(:info, info, in_),
            Arg(:comm, comm, in_),
            Arg(:win, win, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_create_dynamic,
        void,
        v"0",
        [Arg(:info, info, in_), Arg(:comm, comm, in_), Arg(:win, win, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Win_detach, void, v"0", [Arg(:win, win, in_), Arg(:base, buffer, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_fence, void, v"0", [Arg(:assert, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_flush, void, v"0", [Arg(:rank, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_flush_all, void, v"0", [Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_flush_local, void, v"0", [Arg(:rank, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_flush_local_all, void, v"0", [Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_free, void, v"0", [Arg(:win, win, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_get_group, void, v"0", [Arg(:win, win, in_), Arg(:group, group, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_get_info, void, v"0", [Arg(:win, win, in_), Arg(:info_used, info, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Win_lock,
        void,
        v"0",
        [
            Arg(:lock_type, integer, in_),
            Arg(:rank, integer, in_),
            Arg(:assert, integer, in_),
            Arg(:win, win, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Win_lock_all, void, v"0", [Arg(:assert, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Win_post,
        void,
        v"0",
        [Arg(:group, group, in_), Arg(:assert, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Win_set_info, void, v"0", [Arg(:win, win, in_), Arg(:info, info, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Win_shared_query,
        void,
        v"0",
        [
            Arg(:win, win, in_),
            Arg(:rank, integer, in_),
            Arg(:size, address, out),
            Arg(:disp_unit, integer, out),
            Arg(:baseptr, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Win_start,
        void,
        v"0",
        [Arg(:group, group, in_), Arg(:assert, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Win_sync, void, v"0", [Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_test, void, v"0", [Arg(:win, win, in_), Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_unlock, void, v"0", [Arg(:rank, integer, in_), Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_unlock_all, void, v"0", [Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Win_wait, void, v"0", [Arg(:win, win, in_), Arg(:ierror, errorcode, out)]),

    # A.5.11 External Interfaces Fortran Bindings

    Fun(:MPI_Grequest_complete, void, v"0", [Arg(:request, request, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Grequest_start,
        void,
        v"99999",
        [
            Arg(:query_fn, external, in_), # MPI_Grequest_query_function *
            Arg(:free_fn, external, in_), # MPI_Grequest_free_function *
            Arg(:cancel_fn, external, in_), # MPI_Grequest_cancel_function *
            Arg(:extra_state, buffer, out),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Status_set_cancelled, void, v"0", [Arg(:status, status, out), Arg(:flag, logical, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Status_set_elements,
        void,
        v"0",
        [Arg(:status, status, out), Arg(:datatype, datatype, in_), Arg(:count, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Status_set_error, void, v"4.1", [Arg(:status, status, out), Arg(:err, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Status_set_source, void, v"4.1", [Arg(:status, status, out), Arg(:source, integer, in_), Arg(:ierror, errorcode, out)]
    ),
    Fun(:MPI_Status_set_tag, void, v"4.1", [Arg(:status, status, out), Arg(:tag, integer, in_), Arg(:ierror, errorcode, out)]),

    # A.5.12 I/O Fortran Bindings

    Fun(:MPI_File_close, void, v"0", [Arg(:fh, file, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_delete, void, v"0", [Arg(:filename, character, in_), Arg(:info, info, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_get_amode, void, v"0", [Arg(:fh, file, in_), Arg(:amode, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_get_atomicity, void, v"0", [Arg(:fh, file, in_), Arg(:flag, logical, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_File_get_byte_offset,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:offset, offset, in_), Arg(:disp, offset, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_File_get_group, void, v"0", [Arg(:fh, file, in_), Arg(:group, group, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_get_info, void, v"0", [Arg(:fh, file, in_), Arg(:info_used, info, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_get_position, void, v"0", [Arg(:fh, file, in_), Arg(:offset, offset, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_get_position_shared, void, v"0", [Arg(:fh, file, in_), Arg(:offset, offset, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_get_size, void, v"0", [Arg(:fh, file, in_), Arg(:size, offset, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_File_get_type_extent,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:datatype, datatype, in_), Arg(:extent, address, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_get_view,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:disp, offset, out),
            Arg(:etype, datatype, out),
            Arg(:filetype, datatype, out),
            Arg(:datarep, character, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iread,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iread_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iread_at,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iread_at_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iread_shared,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iwrite,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iwrite_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iwrite_at,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iwrite_at_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_iwrite_shared,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:request, request, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_open,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:filename, character, in_),
            Arg(:amode, integer, in_),
            Arg(:info, info, in_),
            Arg(:fh, file, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_File_preallocate, void, v"0", [Arg(:fh, file, in_), Arg(:size, offset, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_File_read,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_all_begin,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_all_end,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:buf, buffer, out), Arg(:status, status, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_read_at,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_at_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_at_all_begin,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_at_all_end,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:buf, buffer, out), Arg(:status, status, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_read_ordered,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_ordered_begin,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_read_ordered_end,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:buf, buffer, out), Arg(:status, status, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_read_shared,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, out),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_seek,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:offset, offset, in_), Arg(:whence, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_seek_shared,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:offset, offset, in_), Arg(:whence, integer, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_File_set_atomicity, void, v"0", [Arg(:fh, file, in_), Arg(:flag, logical, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_set_info, void, v"0", [Arg(:fh, file, in_), Arg(:info, info, in_), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_File_set_size, void, v"0", [Arg(:fh, file, in_), Arg(:size, offset, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_File_set_view,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:disp, offset, in_),
            Arg(:etype, datatype, in_),
            Arg(:filetype, datatype, in_),
            Arg(:datarep, character, in_),
            Arg(:info, info, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_File_sync, void, v"0", [Arg(:fh, file, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_File_write,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_all_begin,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_all_end,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:buf, buffer, in_), Arg(:status, status, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_write_at,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_at_all,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_at_all_begin,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:offset, offset, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_at_all_end,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:buf, buffer, in_), Arg(:status, status, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_write_ordered,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_ordered_begin,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_File_write_ordered_end,
        void,
        v"0",
        [Arg(:fh, file, in_), Arg(:buf, buffer, in_), Arg(:status, status, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_File_write_shared,
        void,
        v"0",
        [
            Arg(:fh, file, in_),
            Arg(:buf, buffer, in_),
            Arg(:count, integer, in_),
            Arg(:datatype, datatype, in_),
            Arg(:status, status, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Register_datarep,
        void,
        v"99999",
        [
            Arg(:datarep, character, in_),
            Arg(:read_conversion_fn, external, in_), # MPI_Datarep_conversion_function *
            Arg(:write_conversion_fn, external, in_), # MPI_Datarep_conversion_function *
            Arg(:dtype_file_extent_fn, external, in_), # MPI_Datarep_extent_function *
            Arg(:extra_state, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),

    # A.5.13 Language Bindings Fortran Bindings

    Fun(:MPI_F_sync_reg, void, v"0", [Arg(:buf, buffer, out)]),
    # The following procedure is not available with mpif.h:
    # MPI_STATUS_F082F(F08_STATUS, F_STATUS, IERROR)
    #     TYPE(MPI_Status) :: F08_STATUS
    #     INTEGER :: F_STATUS(MPI_STATUS_SIZE), IERROR
    # The following procedure is not available with mpif.h:
    # MPI_STATUS_F2F08(F_STATUS, F08_STATUS, IERROR)
    #     INTEGER :: F_STATUS(MPI_STATUS_SIZE), IERROR
    #     TYPE(MPI_Status) :: F08_STATUS
    Fun(
        :MPI_Type_create_f90_complex,
        void,
        v"0",
        [Arg(:p, integer, in_), Arg(:r, integer, in_), Arg(:newtype, datatype, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_create_f90_integer,
        void,
        v"0",
        [Arg(:r, integer, in_), Arg(:newtype, datatype, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_create_f90_real,
        void,
        v"0",
        [Arg(:p, integer, in_), Arg(:r, integer, in_), Arg(:newtype, datatype, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_match_size,
        void,
        v"0",
        [Arg(:typeclass, integer, in_), Arg(:size, integer, in_), Arg(:newtype, datatype, out), Arg(:ierror, errorcode, out)],
    ),

    # A.5.14 Tools / Profiling Interface Fortran Bindings

    Fun(:MPI_Pcontrol, void, v"0", [Arg(:level, integer, in_)]),

    # A.5.15 Deprecated Fortran Bindings

    Fun(:MPI_Attr_delete, void, v"0", [Arg(:comm, comm, in_), Arg(:keyval, integer, in_), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Attr_get,
        void,
        v"0",
        [
            Arg(:comm, comm, in_),
            Arg(:keyval, integer, in_),
            Arg(:attribute_val, buffer, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Attr_put,
        void,
        v"0",
        [Arg(:comm, comm, in_), Arg(:keyval, integer, in_), Arg(:attribute_val, buffer, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Get_elements_x,
        void,
        v"0",
        [Arg(:status, status, in_), Arg(:datatype, datatype, in_), Arg(:count, count, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Info_get,
        void,
        v"0",
        [
            Arg(:info, info, in_),
            Arg(:key, character, in_),
            Arg(:valuelen, integer, in_),
            Arg(:value, character, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Info_get_valuelen,
        void,
        v"0",
        [
            Arg(:info, info, in_),
            Arg(:key, character, in_),
            Arg(:valuelen, integer, out),
            Arg(:flag, logical, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Keyval_create,
        void,
        v"99999",
        [
            Arg(:copy_fn, external, in_), # MPI_Copy_function *
            Arg(:delete_fn, external, in_), # MPI_Delete_function *
            Arg(:keyval, integer, out),
            Arg(:extra_state, buffer, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Keyval_free, void, v"0", [Arg(:keyval, integer, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Status_set_elements_x,
        void,
        v"0",
        [Arg(:status, status, out), Arg(:datatype, datatype, in_), Arg(:count, count, in_), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_get_extent_x,
        void,
        v"0",
        [Arg(:datatype, datatype, in_), Arg(:lb, count, out), Arg(:extent, count, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(
        :MPI_Type_get_true_extent_x,
        void,
        v"0",
        [Arg(:datatype, datatype, in_), Arg(:true_lb, count, out), Arg(:true_extent, count, out), Arg(:ierror, errorcode, out)],
    ),
    Fun(:MPI_Type_size_x, void, v"0", [Arg(:datatype, datatype, in_), Arg(:size, count, out), Arg(:ierror, errorcode, out)]),

    # Removed Fortran Bindings

    Fun(:MPI_Address, void, v"0", [Arg(:location, buffer, out), Arg(:address, address, out), Arg(:ierror, errorcode, out)]),
    Fun(
        :MPI_Type_hindexed,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_blocklengths, integer, out),
            Arg(:array_of_displacements, address, out),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_hvector,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:blocklength, integer, in_),
            Arg(:stride, address, in_),
            Arg(:oldtype, datatype, in_),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(
        :MPI_Type_struct,
        void,
        v"0",
        [
            Arg(:count, integer, in_),
            Arg(:array_of_blocklengths, integer, out),
            Arg(:array_of_displacements, address, out),
            Arg(:array_of_types, datatype, out),
            Arg(:newtype, datatype, out),
            Arg(:ierror, errorcode, out),
        ],
    ),
    Fun(:MPI_Type_extent, void, v"0", [Arg(:datatype, datatype, in_), Arg(:extent, address, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Type_lb, void, v"0", [Arg(:datatype, datatype, in_), Arg(:displacement, address, out), Arg(:ierror, errorcode, out)]),
    Fun(:MPI_Type_ub, void, v"0", [Arg(:datatype, datatype, in_), Arg(:displacement, address, out), Arg(:ierror, errorcode, out)]),
]
